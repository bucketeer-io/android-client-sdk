import java.nio.file.Files
import java.nio.file.Paths

plugins {
  alias(libs.plugins.android.library)
  alias(libs.plugins.kotlin.android)
  alias(libs.plugins.ksp)
  alias(libs.plugins.publish)
  alias(libs.plugins.kotlin.dokka)
  alias(libs.plugins.kotlinter)
}

def properties = new Properties()
if (Files.exists(Paths.get("$rootProject.rootDir/local.properties"))) {
  properties.load(rootProject.file('local.properties').newDataInputStream())
}

android {
  namespace = "io.bucketeer.sdk.android"

  compileSdk project.findProperty("android.compileSdk") as int

  defaultConfig {
    minSdkVersion project.findProperty("android.minSdkVersion") as int
    targetSdkVersion project.findProperty("android.targetSdkVersion") as int

    buildConfigField("String", "SDK_VERSION", "\"${VERSION_NAME}\"")

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArguments clearPackageData: "true"

    testOptions {
      execution "ANDROIDX_TEST_ORCHESTRATOR"
    }
  }

  buildTypes {
    debug {
      def API_KEY = properties.getProperty("api_key") ?: System.getenv("API_KEY")
      def API_ENDPOINT = properties.getProperty("api_endpoint") ?: System.getenv("API_ENDPOINT")
      buildConfigField("String", "API_KEY", "\"${API_KEY}\"")
      buildConfigField("String", "API_ENDPOINT", "\"${API_ENDPOINT}\"")
    }
    release {
      consumerProguardFiles 'proguard-rules.pro'
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  kotlinOptions {
    jvmTarget = "17"
  }

  lintOptions {
    disable 'InvalidPackage'
    xmlReport true
  }

  buildFeatures {
    buildConfig = true
  }
}

androidComponents {
  onVariants(selector().all(), { variant ->
    // manually add ksp source dir
    // https://github.com/google/ksp/issues/37
    def ss = kotlin.sourceSets.findByName(variant.name)
    if (ss != null) {
      ss.kotlin.srcDirs(file("$buildDir/generated/ksp/${variant.name}/kotlin"))
    }
  })
}

dependencies {
  implementation libs.androidx.sqlite

  implementation libs.okhttp.client

  implementation libs.moshi.kotlin
  implementation libs.moshi.adapters
  ksp(libs.moshi.codegen)

  implementation libs.androidx.lifecycle.process

  // Google Play Services
  compileOnly libs.googlePlayServices.basement

  testImplementation projects.mocks
  testImplementation libs.okhttp.mockwebserver
  testImplementation libs.junit
  testImplementation libs.truth
  testImplementation libs.robolectric
  testImplementation libs.androidx.test.core
  testImplementation libs.testParameterInjector

  androidTestImplementation libs.androidx.test.rules
  androidTestImplementation libs.androidx.test.ext
  androidTestImplementation libs.truth
  androidTestUtil libs.androidx.test.orchestrator
}

publishing {
  repositories {
    maven {
      name = "testLocal"
      url = "${rootProject.buildDir}/localMaven"
    }
  }
}

// https://github.com/Kotlin/dokka/issues/2472
afterEvaluate {
  tasks.getByName("javaDocReleaseGeneration").enabled(false)
}
